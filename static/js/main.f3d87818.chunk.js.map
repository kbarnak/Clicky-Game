{"version":3,"sources":["images/angryface.png","images/annoyedface.png","images/laughingface.png","images/lovelyface.png","images/moneyface.png","images/nerdface.png","images/partyface.png","images/sillyface.png","components/Header.js","components/Tile.js","images.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","props","react_default","a","createElement","className","message","currentScore","topScore","Tile","src","alt","onClick","handleTileClick","id","emojis","emoji1","emoji2","emoji3","emoji4","emoji5","emoji6","emoji7","emoji8","App","state","clicked","tiles","handleTileCick","console","log","concat","_this","includes","alert","setState","newArr","shuffle","Object","toConsumableArray","this","i","length","j","Math","floor","random","_ref","_this2","map","tile","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f3d87818.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/angryface.856c72c5.png\";","module.exports = __webpack_public_path__ + \"static/media/annoyedface.3a21bbc1.png\";","module.exports = __webpack_public_path__ + \"static/media/laughingface.0a90de23.png\";","module.exports = __webpack_public_path__ + \"static/media/lovelyface.293b84f3.png\";","module.exports = __webpack_public_path__ + \"static/media/moneyface.29f134fb.png\";","module.exports = __webpack_public_path__ + \"static/media/nerdface.9721692e.png\";","module.exports = __webpack_public_path__ + \"static/media/partyface.65af793d.png\";","module.exports = __webpack_public_path__ + \"static/media/sillyface.2a7c3946.png\";","import React from \"react\";\n// import './App.css';\n// import Header from \"../components/Header\";\n// import App from \"../App\";\n\nexport default function Header(props) {\n\n    return (\n        <header className=\"inner-container\">\n            <div>Clicky Emoji Game</div>\n            <div>{props.message}</div>\n            <div>Current Score: {props.currentScore}</div>\n            <div>Top Score: {props.topScore}</div>\n        </header>\n    );\n}\n\n// export default App; ","import React from \"react\";\n\nexport default function Tile(props) {\n\n    return (\n        <div className=\"game-space\">\n            <div className=\"image\">\n\n                <img src={props.src} alt=\"emoji\" onClick={() => props.handleTileClick(props.id)} />\n\n            </div>\n        </div>\n    )\n}\n\n","import emoji1 from './images/angryface.png'\nimport emoji2 from './images/annoyedface.png'\nimport emoji3 from './images/laughingface.png'\nimport emoji4 from './images/lovelyface.png'\nimport emoji5 from './images/moneyface.png'\nimport emoji6 from './images/nerdface.png'\nimport emoji7 from './images/partyface.png'\nimport emoji8 from './images/sillyface.png'\n\n\nconst emojis = [\n    { id: 0, src: emoji1 },\n    { id: 1, src: emoji2 },\n    { id: 2, src: emoji3 },\n    { id: 3, src: emoji4 },\n    { id: 4, src: emoji5 },\n    { id: 5, src: emoji6 },\n    { id: 6, src: emoji7 },\n    { id: 7, src: emoji8 }\n]\n\nexport default emojis;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Tile from './components/Tile';\nimport emojis from './images';\n\nclass App extends Component {\n  state = {\n    currentScore: 0,\n    topScore: 0,\n    message: \"Try not to double click the Emoji!\",\n    clicked: [],\n    tiles: emojis\n  }\n\n  shuffle(a) {\n    for (let i = a.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n  }\n  handleTileCick = (id) => {\n    console.log(`I've been clicked ${id}`);\n\n    if (!this.state.clicked.includes(id)) {\n      const newArr = this.shuffle(this.state.tiles);\n      this.setState({\n        clicked: [...this.state.clicked, id],\n        currentScore: this.state.currentScore + 1,\n        tiles: newArr\n      }, function () {\n        console.log(this.state.clicked)\n      })\n    } else {\n      alert(\"Sorry! You lose!\")\n      if (this.state.currentScore > this.state.topScore) {\n        this.setState({\n          clicked: [],\n          currentScore: 0,\n          topScore: this.state.currentScore\n        })\n      } else {\n        this.setState({\n          clicked: [],\n          currentScore: 0\n        })\n\n      }\n\n    }\n\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        < Header\n          currentScore={this.state.currentScore}\n          topScore={this.state.topScore}\n          message={this.state.message}\n        />\n        <div className=\"game-space\">\n          {this.state.tiles.map((tile, i) => (\n            < Tile\n              src={tile.src}\n              key={i}\n              id={tile.id}\n              handleTileClick={this.handleTileCick}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}